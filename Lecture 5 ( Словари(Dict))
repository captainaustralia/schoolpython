Словарь - (с англ. Dictionary , в питоне кратко обозначается "dict")
Начнём с того, что словарь в питоне является одним из типов данных, как и известные вам int/float/boolean/string/tuple/list.
Словарь - тип данных, который содержит в себе пары ключ/значение (key/value).

- Как определить словарь:
1)Пустой словарь
clear_dict = {}

2)Словарь, который хранит пару ключ : значение, например Фамилия:Возраст
* Значение и ключ могут быть различных типов, т.е , как в данном случае chegevara - string, 99 - int
test_dictionary = {'Chegevara':99}

В данном случае словарь содержит в себе одну пару, ключ : значение
Мы можем также создать словарь в котором будет находиться несколько пар
test_dictionary_1 = {'Chegevara':99,'Tsoy':0}

Теперь посмотрим, что выведет функция print()
print(test_dictionary)
>> {'Chegevara':99}

print(test_dictionary_1)
>> {'Chegevara':99,'Tsoy':0}

-Для чего может быть использован словарь?
Например мы создаем игру, в которой у нас будет какой-то герой, который сможет перемещаться
для того, чтобы можно было , как-то определять его местоположение мы можем создать словарь
с координатами Х,Y

hero_coordinates = {'x_coordinates':0,'y_coordinates':0}
Определили героя с координатами, х = 0 , у = 0
Но игра это же постоянная динамика, герой постоянно перемещается, поэтому нам нужно изменять эти координаты,
при движении, как это сделать?

В словаре можно изменить значение любого ключа, поэтому, давайте попробуем это сделать
* Для того, чтобы изменить значение какого-либо ключа, мы должны записать название словаря, к которому мы обращаемся,
затем, в квадратных скобках обратиться к ключу, значение которого мы хотим изменить, пробуем:

hero_coordinates = {'x_coordinates':0,'y_coordinates':0}
hero_coordinates['x_coordinates'] = 100
hero_coordinates['y_coordinates'] = 200

print(hero_coordinates)
>>> {'x_coordinates': 100, 'y_coordinates': 200}

Отлично, значения изменились. 
Теперь у вас может возникнуть вопрос, а можем ли изменить ключ - нет, ключ изменять нельзя, ключ неизменяемый , так как
именно с помощью него пайтон проводит поиск объектов в словаре, если изменить ключ сломается весь словарь, поэтому пайтон не даст вам сделать ничего со словарем

Итак, теперь давайте попробуем, как-то перебирать словари, при помощи цикла - for
Для того, чтобы перебрать словарь в цикле, мы сделаем небольшую добавку, которая связана с тем, что словарь содержит пары ключ значение,
т.е мы должны перебирать одновременно 2 объекта, наш классический цикл, типо:
for i in ... :
for i in range():
не сработает. 

Поэтому при переборе словаря мы должны писать так:
for key,value in name_dict.items():
  print(key, value)
  
*Где key, value просто какая-то перебираемая переменная, вместо key, value можно записать что угодно , например k, v / my_key,my_value . Т.е это просто название,
но стоит запомнить, первая переменная в цикле всегда обозначает ключ, вторая всегда обозначает значение, поэтому и удобно сначала писать key,value, чтобы запомнить.
.items(), это метод , который присваивает из ключ в переменную key, значение в переменную value.

Теперь попробуем перебрать словарь:
test = {'Abraham':99, 'Slizerin':20,'Grifindor':65}
for key,value in test.items():
  print(key,value)

>>> Abraham 99
>>> Slizerin 20
>>> Grifindor 65

Также если нам нужно получить только ключ или только значение, вместо метода .items() воспользуемся методами .keys()/ .values()

- Переберем только по ключу:

test = {'Abraham':99, 'Slizerin':20,'Grifindor':65}
for key in test.keys():
  print(key)
  
- Переберем только по значению:

test = {'Abraham':99, 'Slizerin':20,'Grifindor':65}
for value in test.values():
  print(value)
  
*** Запоминаем .items() / .keys() / .values()

Отлично, а как добавить новую пару ключ:значение?
Это довольно просто и для этого даже не нужно использовать методы, создадим пустой словарь и добавим туда студента и его возраст:

students = {}
students['Kiborg'] = 999
print(students)

>>> {'Kiborg': 999}

*** Дополнительные методы для словарей, учить их не обязательно

dict.clear() - очищает словарь.

dict.copy() - возвращает копию словаря.

dict.pop(key[, default]) - удаляет ключ и возвращает значение. Если ключа нет, возвращает default (по умолчанию бросает исключение).

dict.popitem() - удаляет и возвращает пару (ключ, значение). Если словарь пуст, бросает исключение KeyError. Помните, что словари неупорядочены.

dict.setdefault(key[, default]) - возвращает значение ключа, но если его нет, не бросает исключение, а создает ключ со значением default (по умолчанию None).

dict.values() - возвращает значения в словаре.
