1 Лекция: ( Типы данных(Без <list>,<tuple>,<dict>. Операторы. Работа с типами данных)
Int(Integer – целые числа : 1,100,13,99 и.тд)
Float(Числа с плавающей точкой( дробные числа): 0.2, 0.9,1.0,99.99)
Boolean(Логический тип данных: True or False. Существует только 2 значения правда/ложь)
String(Str – строчный тип данных. Данные , находящиеся в строке представляют из себя последовательность символов, например : “123”, “Hello World”, “1 + 2”. )
•	Примечание: Для того, чтобы создать строчный тип необходимо использовать кавычки – ‘text’ , “text”, любые символы написанные в кавычках, будь то просто буквы алфавита, цифры , операторы (+, - , / , *…) попав в кавычки становятся НЕ ФУНКЦИОНАЛЬНОЙ строкой, это значит что они все являются просто символами, никакие операции не выполняются
•	Кавычки обязательны с двух сторон
Операторы:
	Первые операторы которые мы изучим, в большинстве своём вам знакомы
1.	Сложение “+” . Example: 1 + 1 =  ……?
2.	Вычитание “-“ . Example : 1 – 1 = ……?
3.	Умножение “*”. Example : 1 * 1 = …..?
4.	Деление “/”. Example : 1 / 1 = ……?
5.	Оператор “+=”.Example : x = 5 , x += 5 , x  =…….?
6.	Оператор “-=”. Example : x = 2 , x -= 5, x = ……..?
7.	Оператор “*=”.Example : x = 16, x *=3 , x =………?
8.	Оператор “/=”. Example : x = 16, x /= 4, x =………?
•	Ответы заполнить на листе и принести на следующее занятие.
С операторами +, - , *, / вы знакомы со школы, сложение, вычитание, умножение и деление соответственно, ничего нового тут не придумано. Но , что касается операторов под пунктами 	    5 – 8. Эти операторы работают очень просто, рассмотрим на примере оператора под цифрой 7.Давайте возьмем какой-нибудь пример:
1.	Х  = 100
2.	X  *= 10 ;
Х = ?
Вопрос следующий, чему будет равна переменная Х, которая хранится в памяти нашего компьютера:
В 1 строке, мы создали переменную х , которой присвоили значение 100, во 2 строке написали оператор «*=», который возьмет число , которое хранится в переменной Х ( в нашем случае 100), и сохранит в данной переменной «Х» его прошлое значение , умноженное на 10, в итоге ОТВЕТ: 1000
•	Чтобы проще было запомнить, оператор, который ставится перед знаком «=» , это тот простой оператор, который нужно применить к какому-то числу, которое хранится в переменной . 
•	Простые примеры, X = 10 , X += 20 , X = X + 20 ; X = 10 + 20 = 30;
 			X = 15 , X -= 10 , X = X – 10; X = 15 – 10 = 5;
o	print() – функция с помощью которой можно вывести любой текст на экран,
текстом могут быть любые символы.
Варианты написания
print(“123”),print(“Hello , world!”), print(“!@#%^”)
•	Любой текст, который не хранится в переменной (например х = “HELLO”), должен оборачиваться в кавычки с 2-ух сторон.
Также можно вызвать функцию, в которую вы передадите переменную, пример:
Х = “HELLO”
print(X) 
>>> HELLO
•	в скобки передается АРГУМЕНТ функции, он может быть любого типа , но в зависимости от вызванной функции
Можно написать так:
X = “HELLO”
Y  = “ MY NAME IS ,”
Z  = “ ADAVAKEDAVRA!”
print(X + Y + Z)
>>> HELLO MY NAME IS, ADAVAKEDAVRA!
 
	Можно воспользоваться данной функцией , как калькулятором :
	print(121412521515 + 12321412124124)
 
А что если мы напишем:
print(‘121412521515’ + ‘12321412124124’)
Данная операция называется конкатенацией – сложение строк. Так как вы обозначили, ваши целые числа в ‘….’ , то соответственно Python представляет ваши числа, как строки, а арифметическая операция «+» , которая выполняется для чисел складывает 2 числа и выдаёт конечный ответ, в случае же сложения строк, Python складывает их вместе ( они как бы слипаются, и создают конечный ответ в виде двух сложенных строк)


Теперь познакомимся с новыми операторами, с которыми скорее всего вы еще не складывались:
•	«//» - оператор целочисленного деления, что этот оператор делает посмотрим на следующем примере:
Example: 189 // 4 = 47
 

Вы спросите , почему так?

Данный оператор целочисленного деления, делит число нацело, т.е он делит его до тех пор , пока оно делится на заданное число без остатка, а остаток( в нашем случае 1 ) , он выбрасывает, его больше не существует, лентяй..

•	«%» - оператор остатка от деления, это брат  оператора целочисленного деления, но он делает всё с точностью наоборот
 
Он делит число, до тех пор, пока не находит остаток, который больше не может разделить нацело и запоминает его.

Отлично ознакомились с основными типами данных, теперь давайте немного поговорим о переменных, вернее о правилах выбора имен переменных:
•	Имена переменных могут состоять только из букв,цифр и символов подчеркивания. Они могут начинаться с буквы или символа подчеркивания, но не с цифры.
Пример: name1 = “Python” - верно, 1name = “AntiPython” – не верно.
•	Пробелы в именах переменных запрещены, хотите разделить, используйте символ нижнего подчеркивания «”_”».
Пример: name_1 = ‘Python’ – верно , name 1 = ‘Python’ – не верно
•	Нельзя использовать ключевые слова и функции в качестве названия переменных.
Пример: print = 1, if = 1 , else = 1, for = 1 , break = 1 и.тд
•	Старайтесь обозначать имена переменных осмысленно, это значит , что человек который смотрит ваш код ,должен понять о чем идёт речь.
Пример: my_first_array = [] – верно , massiv = [] – не верно, да-да , транслитом писать тоже не нужно, если вы понимаете транслит это прекрасно, а если это будет какой-нибудь англичанин, который смотрит ваш код на GitHub, как он поймёт о чем речь?
	Теперь давайте рассмотрим, каждый тип отдельно узнаем о методах и запомним(!) их:
String(Строка):
Строка – простая последовательность символов.
Пример my_string = “1234@#!@#!@%%@!asdasddsgij1g-__--_” 
•	Всё , что будет находиться в кавычках, является обычной строкой, как будто какое-то предложение.
•	Напомним, что кавычки могут быть одинарные ‘ … ‘ , двойные “ “ 
“Text for students”, ‘Text for students’
•	Методы – функции применяемые к определенному типу данных, использующиеся для каких-то дефолтных(стандартных) изменений.
•	Синтаксис метода:
Так как метод применяется, к какой-то переменной( а он , как ни крути представитель какого-то класса) то есть правила, чтобы вызвать любой метод к чему-либо, нужно записать название объекта/переменной к которому/которой применяется метод, затем точка и название метода со скобками
Пример: nameobject.namemethod()
 

Методы применяемые к строкам:
1.title()

•	Title в переводе с английского – заглавие;
•	Метод title(), превращает 1 буквы элементов в заглавные. Где это может использоваться? Например пользователю нужно при регистрации ввести свое ФИО, пользователь может записать свое ФИО с маленькой буквы или как ему вздумается, но для корректного отображения, например, в личном кабинете нам потребуется выдать его данные в корректном виде , по типу «Иванов Иван Иванович», для этого мы просто вызовем метод .title();
 

2.	upper()/lower()
•	Как вы и сами вероятнее всего догадались, это обратные друг-другу методы, upper – превращает все буквы строки в заглавные, lower – наоборот
 

Теперь давайте посмотрим на такую операцию , как «конкатенация», которая применяется к строкам. Сразу перейдем к примеру:
Объявим 2 переменные, в которых будет хранить тип данных string(далее всегда будет сокращенно str)
 
Первым делом обратим внимание, что в переменных действительно находятся str типы, на это нам указывают двойные кавычки. Теперь давайте подумаем, что будет , если мы захотим сложить string_1 + string2? Например напишем, print(string_1 + string_2)
 
Сразу ответим на ваш вопрос:
1.	Мы создали 2 переменные , в которых содержатся строки
2.	Попытались эти строки сложить, возможно вы ожидали, что вы получите ответ 434
3.	Получили 123321
•	На самом деле, операция «+» для строк отменяет математические законы, здесь нет никакой математики. Строки просто «склеиваются» - это и есть операция , которая называется конкатенацией.

Табуляции и разрывы строк: 
Пропуски в начале строки, которые можно сделать например кнопкой «Tab»(кстати говоря одно нажатие на таб = 4 нажатиям на пробел), называются табуляцией , зачем нам нужна табуляция вы узнаете позже.
•	Если нам необходима табуляция в строке мы можем вызвать комбинацию символов \t
 
•	Если нам нужно писать последующий текст на новой строке мы используем комбинацию символов \n ( чтобы проще было запомнить n = new line)
 





	Рассмотрим еще один довольно нужный метод, применяемый к строкам, который удаляет пропуски:
4.Методы rstrip(),lstrip(),strip():
rstrip() – удаляет пропуски справа( right – право)
lstrip() – удаляет пропуски слева( left – лево)
strip() – удаляет пропуски и слева, и справа
 

ДЗ
Прочитать всю лекцию, запомнить:
1.	Все типы данных
2.	Методы для строк
3.	Попрактиковать их в IDE
