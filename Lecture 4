*** Срезы (Slice)
Срезы предназначены для итерирующихся типов данных, которые можно "разрезать" или "поделить" на нужные нам части.
***Синтаксис срезов
name_slice[i:j:k], где i - начало, j - конец, k - через сколько элементов.
*Важные уточнения:
*Если мы запишем диапазон [0:] - мы получим всё целиком.(j по умолчанию = - 1)
*Если мы запишем диапазон [0:3] - мы получим элементы с 0 индекса, до 3 - 1.
Создадим строку:
test_string = 'adavakedavra'
- 1. Хотим разрезать строку до 5 элемента
print(test_string[0:5])
>>> adava
- 2. Хотим получить каждый второй элемент строки.
print(test_string[::2])
>>> aaaear
* Важное дополнение, мы можем реверсировать ( получить строку наоборот) строку, при помощи срезов
print(test_string[::-1])
>>> arvadekavada

***** Тренировочные задания к срезам *****
1) Выведите на экран последовательность символов:
a
ab
abc
abcd
abcde
abcde.......
и.тд до строки, заканчивающейся символом 'z'

2) По данной строке определите, является ли она палиндромом (то есть верно ли, что она одинаково читается слева направо и справа налево)
Пример слов палиндромов:
заказ
довод
кабак
казак
комок
топот
и.тд
- Ваша программа получает на вход строку, ответ должен быть "YES" в случае если слово - палиндром, "NO" в противном случае

3) Программа получает на вход 5 произвольных чисел, нужно получить 3 ответа:
1 . Какова сумма первых 3 элементов;
2 . Чему равно произведение всех 5 элементов;
3 . Делится ли первое число на последнее без остатка;

4) Даны 5 положительных чисел, требуется перевернуть каждое из чисел и распечатать их в обратном порядке. При этом, если перевернутое число начинается с нуля,
то ведущие нули не печатаются. Например , вместо 230, нужно вывести 32, вместо 100 - 1 . Пять чисел вводятся в одной строке через пробел. Требуется вывести ответ
состоящий также из 5 чисел , через пробел

***Функции
Функция - именованный блок кода, предназначенный для решения одной конкретной задачи.
Для чего нужны функции?
Если в вашем коде, задача должна многократно выполняться в программе, вам не придется переписывать или копировать этот участок кода,
для этого вы можете определить его в начале вашей программы и вызывать при необходимости

Пример функции, которая выполняет приветствие
def hello_user():
    print("Hello!")
В данной функции всего 1 задача - приветствие.
Если мы напишем, в какой-то строке :
hello_user()
Это будет значить, что в данной строке мы вызвали функцию hello_user()
и она выведет >>> Hello!
Синтаксис:
def ( define - определить) function_name():
где function_name - какое-то произвольное название нашей функции.
Для чего нужны скобки?
В скобки мы можем обязать нас передавать какой-то аргумент, например:
def hello_user(name):
    print('Hello' + name)
* В данном случае, вызывая функцию, она всегда будет ожидать аргумент, потому что при определении функции вы сказали , моя функция называется hello_user, и 
в нее ОБЯЗАТЕЛЬНО нужно передать аргумент. ( Почему мы там пишем name? То, что вы напишите при определении функции, будет являться подсказкой для вас или для другого
программиста, таким образом вы даете понять, что аргументом должно являться какое-то имя).
Окей, теперь давайте вызовем функцию
hello_user('Viktor')
Результатом будет являться
>>> Hello Viktor
Надеюсь тут всё понятно..

Следует запомнить, что функция не обязана выдавать результат своей работы, иными словами, она не обязана выдать вам информацию в консоль, как например мы делаем при вызове
функции print("anything"), т.е вызвав ее , она проведёт какие-то манипуляции , которые вы ей описали и если ничего не нужно возвращать, закончит свою работу.

Пример:

def test_name(first_name,last_name):
    full_name = first_name + ' ' + last_name
    return full_name.title()
Что мы тут натворили?
Все просто - создали функцию с названием test_name , сказали ей, чтобы она ожидала 2 аргумента first_name and last_name, затем сохранили в новой локальной переменной 
Имя + пробел + Фамилию, а затем написали return full_name.title() , т.е вернем нормальный вид , написав фамилию и имя с большой буквы.
Так, ну а теперь давайте вызовем

test_name("igor","akinfeev")
>>> результата нет ;(
В данном случае, функция все сделала, она получила имя и фамилию , и даже отредактировала при помощи метода .title(), но ничего не выдала, давайте все таки убедимся
Запишем:
print(test_name("igor","akinfeev")
>>> Igor Akinfeev
Все получилось, все работает.

* Запомним, что если мы определяем функцию и аргументы в (), то они будут ожидаться всегда! Функция не начнет свою работу если не получит аргументов
* Но, мы можем сделать так, чтобы определенный аргумент был не обязателен. Для этого нужно присвоить ему ' ' , пример
def fio(first_name,last_name,middle_name=''):
    full_name = first_name + ' ' + middle_name + ' ' + last_name
    return(full_name)
print(fio('Viktor','Tsoy')
>>> Viktor Tsoy

Как видите, все работает. 
* Также нужно запомнить, если вы точно не знаете, нужно ли в 100% случаев передавать какой-то аргумент, его следует написать самым последним и дописать = ''

*** РЕКУРСИЯ ***
Чтобы понять рекурсию, нужно понять рекурсию :)
Итак, простыми словами, рекурсивная функция это функция, которая в процессе выполнения вызывает сама себя. Не верите мне? Проверим в гугле
Рекурси́вная фу́нкция — это числовая функция f(n) числового аргумента, которая в своей записи содержит себя же.


Итак, пример рекурсии:
Самый частый пример, нахождение факториала какого-то числа, для тех кто не помнит что такое факториал ->  факториал числа 5 = 1*2*3*4*5 = 120

def factorial_recursive(n):
    if n == 1:
        return n
    else:
        return n*factorial_recursive(n-1)
- Что происходит в данной функции?
1. Определили функцию с именем factorial_recursive , которая обязательно будет ждать аргумент n ( где n - некоторое число)
2. Если n = 1 , мы вернем n
3. Если n != 1 , ты вызовем функцию n * factorial_recursive(n-1)
... подумайте на досуге, а пока что, вот вам пару задач по рекурсии

1.Запишите рекурсивную функцию, вычисляющую сумму целых чисел m и n , в которой из арифметический операций используется только +1 и -1
Запрещено использовать циклы,массивы.Задачу нужно решить с помощью рекурсивной функции.

2.Возводить в степень можно гораздо быстрее, чем за n умножений!
Для этого нужно воспользоваться следующими рекуррентными соотношениями: aⁿ = (a²)ⁿ/² при четном n, aⁿ=a⋅aⁿ⁻¹ при нечетном n. 
Реализуйте алгоритм быстрого возведения в степень. 

3.Дана последовательность чисел, завершающаяся числом 0. Найдите сумму всех этих чисел, не используя цикл.



