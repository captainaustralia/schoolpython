Лекция 2: ( Массивы/Списки <Array><List>)

Поговорим о новом типе данных – список(List) или , как его чаще называют, массив(Array)
•	Array и List , это одно и тоже, в других языках программирования этот тип данных называют Массив, в Python – список. Не смотря на то, что мы учим Python, мы всё же будем называть тип данных <List> массивом.
Что же такое массив? Массив это тип данных, который представляет из себя элемент, включающий множество проиндексированных ячеек с другими данными, возможно различного типа. Может звучать сложно, но давайте представим себе вагон
 В 1 вагоне едет число – 123, во втором строка “ABC”, в третьем строка с символом $, в последнем вагоне едет дробное число 0.1.
Итак, что же это такое? На самом деле, структура массива, точно такая же, когда мы говорим едет поезд, мы представляем множество сцепленных между собой вагонов. Если мы скажем , я определил массив, вы должны представить себе множество связанных ячеек
 
Теперь поговорим о нумерации, в жизни, если бы мы увидели вагон, мы бы начинали считать примерно так : «Хм.. это первый вагон, это второй, третий и так далее»
В программировании не совсем так, « 0 вагон, 1 вагон , 2 вагон, 3 вагон», запомните в программировании , всё что имеет индекс( т.е какое-то порядковое число , которое определяет его место) , индексируется с НУЛЯ!
•	Важная информация, 0 элемент всегда первый, а -1 это самый последний
Итак, как создать массив, синтаксис следующий:
Name_array = []
Давайте создадим массив с элементами, которые мы описывали выше:
Name_array = [123,”ABC”,”$”,0.1]
•	Создали массив с именем Name_array , в котором 4 элемента( знаком “,” вы говорите Python, что вы перечисляете элементы)
Как же нам обратиться к массиву?
Например нужно распечатать весь массив:
Print(Name_array)
Результатом будет: >>> [123,”ABC”,”$”,0.1]
А если нужно какой-то определенный элемент из массива? Например $:
Print(Name_array[2])
Результатом будет: >>> “$”
Также мы можем использовать наш элемент из массива и написать какое-нибудь сообщение, например:
Print(“HELLO MISTER GIVE ME 100” + Name_array[2])
Результат: >>> HELLO MISTER GIVE ME 100$
•	Мы можем складывать строку с элементом массива

Теперь представим, что мы сделали регистрацию на сайте, и нам нужно каким-то образом добавлять в наш массив с именем users_name = [] , новых пользователей. Специально для этого в Python есть методы, для добавления элементов в массив , а также удаления элементов
Давайте начнем с простого:
•	Как поменять какой-то элемент с известным индексом на то, что нам нужно?
 
Итак пример:
Создали массив с именем
Захотели изменить массив , а именно элемент под индексом 0( он же самый первый, верно?)
Вывели весь массив, и увидели изменение имени
Отлично, теперь перейдём к методам:

Метод APPEND(что добавляем)
Данный метод, добавит В КОНЕЦ массива, элемент который вы укажете в скобках.
Пример:  
Метод insert(номер ячейки, что добавляем)
Почти тоже самое , что и append() , только добавление происходит не в конец, а в нужное нам место в массиве
 
А что насчёт удаления?
Для этого воспользуемся командой, а не методом
DEL
 

Сначала пишем команду del после нее название массива[элемент], если вы совершите данное удаление, то вернуть обратно его будет невозможно, оно будет потеряно навсегда

Метод POP()
Данный метод удалит самый последний элемент из массива
•	Можно хитрить при помощи данного метода. Например, если нам нужно удалить последний элемент, но запомнить его , мы можем написать вот так
Save_user = users_name.pop()
Удалит, но вы будете хранить его в переменной. Часто будет нужно, запомните!
Метод remove()
Используется для того, чтобы удалить элемент не по индексу, а по названию
Users_name.remove(‘VIKTOR’)

Циклы:
Цикл “перебора” 
for I in range(1000):
	print(i)
Цикл с условием
While (True):
